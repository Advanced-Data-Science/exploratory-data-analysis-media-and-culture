import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import numpy as np
import time

# --- Load dataset ---
print("Loading dataset...")
df = pd.read_csv("merged_billboard_spotify_matched_only.csv")

# --- Select only numeric columns for clustering ---
X = df.select_dtypes(include=[np.number]).dropna()
print(f"Data shape: {X.shape}")

# --- Scale the data ---
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# --- Choose range of k values ---
K_range = range(2, 11)
inertias = []
silhouettes = []

# --- Optional: sample for silhouette to speed up ---
sample_size = min(10000, len(X_scaled))  # cap at 10k rows

print(f"\nRunning KMeans clustering for k = 2â€“10 on {len(X_scaled)} rows...")
print(f"Silhouette calculations will use {sample_size} samples.\n")

for k in K_range:
    start = time.time()
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(X_scaled)

    inertias.append(kmeans.inertia_)

    # Sample a subset for silhouette score (computationally heavy)
    idx = np.random.choice(len(X_scaled), sample_size, replace=False)
    sil_score = silhouette_score(X_scaled[idx], labels[idx])
    silhouettes.append(sil_score)

    print(f"k = {k} done in {time.time() - start:.2f}s, silhouette = {sil_score:.3f}")

# --- Plot results ---
plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(K_range, inertias, '-o')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method')

plt.subplot(1, 2, 2)
plt.plot(K_range, silhouettes, '-o', color='orange')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Method')

plt.tight_layout()
plt.show()
